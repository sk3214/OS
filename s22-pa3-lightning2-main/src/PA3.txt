        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

. Mohammad Faraz <mohamma9@buffalo.edu>
Sagar Khuteta <sagarkhu@buffalo.edu>
Akshay Bhatt <abhatt@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> Introduced hash page_table inside the thread structure. The page_table is used to
   map each process with its respective page table which can then be used in page.c 
   to do manipulations like insert,delete,update inside the supplemental page table. 

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.
-> Since we're using hash tables to represent our supplemental page table, we have
   we have defined page_hash and page_less functions which are used for initializing
   the hash table. The page_hash function generates a hash value for a given hash 
   element using hash_bytes method defined in hash.c and the page_less function is 
   used to compare the addresses of two pages to determine in which order the pages 
   must be stored. When trying to access the page, we check if the page is in the user
   address space. If it is, then we call the load_from_file function to load the page. 
   We use get_page_entry method to fetch a specific page table entry which in turn uses 
   hash_find. 


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
-> To coordinate accessed and dirty bits between kernel and user
   virtual addresses that alias in a single frame, we are checking
   and updating the addresses of both the accessed and dirty bits. 
   To do so, we can use the functions pagedir_is_accessed, pagedir_is_dirty,
   pagedir_set_accessed and pagedir_set_dirty in the pagedir.c file.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
-> In order to avoid race conditions, we use a lock whenever we are allocating
   or releasing a new frame. When a process needs a new frame, it acquires the 
   lock, which it will hold until it manages to get a new frame. Any other process
   trying to get a new frame while a lock is held will get blocked until the lock 
   is released.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
-> We chose to use a hash table for representing virtual-to-physical mappings
   because a hash table allows constant time look up. Another option was to use
   a list, however, look up time in a list would be O(n) compared to O(1) for A
   hash table.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> We can design a struct swap_table for this purpose. This swap table
should consist of a parameter which tracks free and available swap slots 
like a hashtable we designed for page and frame table. It should also consist
of lock which will ensure that whenever a swap or an eviction is happening, there
won't be any race condition.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
-> Whenever we want to evict any frame, we can develop an algorithm 
similar to LRU and evict the frame which was least recently used. This
will ensure that we will minimize the number of swaps required.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
-> Since, whenever a process is removed from the frame table, we are also
freeing the resources when removing it. Thus, if a process Q had obtained A
frame previously and if it no longer has a frame then remove_frame must have 
been called and inside remove_frame we are calling palloc_get__page and free
method which will free the resources and when the process P obtains a frame it 
will be having those resources and they won't be reflected in process Q.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
-> Whenever the allocated user address space is full and a page is still
   needed for a new process, we will check it the address is 32 bytes below the
   current stack pointer of interrupt frame. This is because PUSHA instruction 
   pushes 32 bytes at once, so it can fault 32 bytes below the stack pointer. 
   If the above conditions are satisfied, then we allocate a supplementary page.
   we should also check that the address is not out of range of the maximum stack 
   size.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
-> Since, the scope of the project is lazy-loading and implementing
stack growth, we are only using 1 frame_lock in our code. This will ensure
that two processes never call a same frame method at a same time and enter
into deadlock. But, if we implement swapping and memory mapping then we
would also need locks for implementing these to prevent deadlocks and
race conditions.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
->  when a page fault in process P causes another process Q's frame 
to be evicted, we are using frame_lock in the get_frame_entry method and 
remove_frame methods. Thus, during these processes since the lock is
acquired there won't be any modification possible from other processes
since it won't be able to access that method. And similarly there
won't be a race condition between eviction of Q's frame and Q faulting 
the page back in.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
-> If a process tries to evict a page that is to be read or swapped from 
   the file system by another process, we lock a page in its frame that 
   makes sure no other process can interfere with the process trying to 
   read the page can help in ensuring any eviction happens after the read.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
-> We check whether the virtual address passed is valid or not. That is,
   if it is outside the range of user address including addresses after 
   expansion of the user stack and if address does not lie in the kernel
   space. If this is not the case, then we kill the process.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
-> As mentioned above, we are using three locks for frame_table, swap_table and
memory_mapped table respectively. This design falls somewhere in between of using 
a single lock and many locks. parallelism is a critical aspect in VM system and
thus using single lock for a system would not be efficient. Thus, we went ahead with
this approach. But we ensure that we still maintain simplicity by using only 1 lock
per table. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> The map function can be used to map system file calls into virtual 
   pages. Thus, in the struct of memory map we will need page_table_entry
   element, a hash element, a map id and a file. The  page_table_entry will 
   tell us the about the virtual pages that need to be loaded into the map call. 
   The hash_element is needed to access the element  in the map table. 
   The file will be needed for the system call to identify in which file
   the system call needs to be done. Whenever a mapping is done correctly, a map
   id will be generated, and if it fails, the map id will be -1.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
-> For the most part they will be well aligned with each other. The 
memory mapping table has virtual addresses of supplemental page table
and whenever it is being loaded we will check for the address similar to
what we did for lazy loading.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
-> The new file mapping will not overlap with any existing segment as
before alloting it that segment we will put a check. For this, we will
first check the total pages it will require for the file operation. Then 
we will check from the 1st page where the map will happen that is upage 
to the length of the page and if till those pages there is no overlap then
we will add the new file mapping otherwise we will return a fault signal.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
-> In our logic of mapping and implementation of executables will be
quite similar. That is even the mapped files are allocated pages as 
and when they need it and thus will be lazily loaded. Thus, the loading
part of both the mmap and data demand-paging will be very similar. In the
case of eviction also, the logic would be similar. That is whenever the tables
are full, we will evict the page only if their dirty bits are set.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

-> The assignment was moderately difficult. There was a lot of reading required
   however the coding part was minimal so the time allotted was sufficient.
   
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

-> Yes working on handling pages and frame gave us a greater understanding of the
   concepts of paging and handling virtual memory

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

-> No, the guidance provided was enough to complete the project.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

-> No.

>> Any other comments?
